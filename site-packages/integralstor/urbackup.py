from integralstor import config, db, networking, system_info

import time
from textwrap import wrap


def get_clients(client_id=None):
    clients = None
    try:
        urb_db, err = config.get_urbackup_db_path()
        if err:
            raise Exception(err)
        if not urb_db:
            raise Exception("Path not set")

        if client_id:
            qry = 'select * from clients where id = %d' % int(client_id)
        else:
            qry = 'select * from clients'
        clients, err = db.get_multiple_rows(urb_db, qry)
        if err:
            raise Exception(err)

    except Exception, e:
        return None, 'Failed fetching client list: %s' % e
    else:
        return clients, None


def get_file_backups():
    backups = None
    try:
        urb_db, err = config.get_urbackup_db_path()
        if err:
            raise Exception(err)
        if not urb_db:
            raise Exception("Path not set")

        qry = 'select * from backups'
        backups, err = db.get_multiple_rows(urb_db, qry)
        if err:
            raise Exception(err)

    except Exception, e:
        return None, 'Failed fetching file backup list: %s' % e
    else:
        return backups, None


def get_image_backups():
    backups = None
    try:
        urb_db, err = config.get_urbackup_db_path()
        if err:
            raise Exception(err)
        if not urb_db:
            raise Exception("Path not set")

        qry = 'select * from backup_images'
        backups, err = db.get_multiple_rows(urb_db, qry)
        if err:
            raise Exception(err)

    except Exception, e:
        return None, 'Failed fetching image backup list: %s' % e
    else:
        return backups, None


def get_log_data(logids=None):
    log_data = None
    try:
        urb_db, err = config.get_urbackup_db_path()
        if err:
            raise Exception(err)
        if not urb_db:
            raise Exception("Path not set")

        if not logids:
            qry = 'select * from log_data'
        elif logids:
            qry = 'select * from log_data where logid in ({0})'.format(
                ', '.join('%d' % logid for logid in logids))
        log_data, err = db.get_multiple_rows(urb_db, qry)
        if err:
            raise Exception(err)

    except Exception, e:
        return None, 'Failed fetching backup logs: %s' % e
    else:
        return log_data, None


def get_logs(date_on=None, date_from=None, date_till=None):
    logs = None
    qry = ''
    try:
        urb_db, err = config.get_urbackup_db_path()
        if err:
            raise Exception(err)
        if not urb_db:
            raise Exception("Path not set")

        if date_on is not None:
            qry = 'select * from logs where strftime("%%Y-%%m-%%d",created) == "%s"' % (
                date_on)
        elif date_from is not None and date_till is not None:
            qry = 'select * from logs where strftime("%%Y-%%m-%%d",created) between "%s" and "%s"' % (
                date_from, date_till)
        elif date_from == None and date_till == None:
            qry = 'select * from logs'
        elif date_from and date_till == None:
            qry = 'select * from logs where strftime("%%Y-%%m-%%d",created) >= "%s"' % (
                date_from)
        elif date_from == None and date_till:
            qry = 'select * from logs where strftime("%%Y-%%m-%%d",created) <= "%s"' % (
                date_till)
        logs, err = db.get_multiple_rows(urb_db, qry)
        if err:
            raise Exception(err)

        """
        # It's not efficient to fetch all log data
        log_data, err = get_log_data()
        if log_data:
            for log in logs:
                log['logdata'] = [data['data'] for data in log_data if data['logid'] == log['id']]
        """

        logids = [log['id'] for log in logs]
        log_data, err = get_log_data(logids)
        if log_data:
            for log in logs:
                log['logdata'] = [data['data']
                                  for data in log_data if data['logid'] == log['id']]

    except Exception, e:
        return None, 'Failed fetching backup logs: %s' % e
    else:
        return logs, None


def compile_report(date_on=None, date_from=None, date_till=None):
    l = []
    try:
        urb_db, err = config.get_urbackup_db_path()
        if err:
            raise Exception(err)
        if not urb_db:
            raise Exception("Path not set")

        clients, err = get_clients()
        if err:
            raise Exception(err)
        client_names = {}
        for client in clients:
            client_names.update({client['id']: client['name']})

        logs, err = get_logs(date_on, date_from, date_till)
        if err:
            raise Exception(err)
        if logs:
            for idx, log in enumerate(logs, start=1):
                d = {}
                d['sno'] = idx
                d['client_name'] = 'N.A'
                d['created_at'] = 'N.A'
                d['error_count'] = 'N.A'
                d['warning_count'] = 'N.A'
                d['is_incremental'] = 'N.A'
                d['is_image'] = 'N.A'
                d['started_at'] = 'N.A'
                d['time_taken'] = 'N.A'
                d['transfer_size'] = 'N.A'
                d['avg_transfer_speed'] = 'N.A'
                d['exit_status'] = 'N.A'

                if log['clientid'] in client_names:
                    #d['client_name'] = client_names[log['clientid']].strip()
                    txt = client_names[log['clientid']].strip()
                    d['client_name'] = '\n'.join(wrap(txt, 15))

                if log['created']:
                    d['created_at'] = log['created']

                if str(log['errors']):
                    d['error_count'] = log['errors']

                if str(log['warnings']):
                    d['warning_count'] = log['warnings']

                if str(log['incremental']):
                    if log['incremental'] == 1:
                        d['is_incremental'] = True
                    elif log['incremental'] == 0:
                        d['is_incremental'] = False

                if str(log['image']):
                    if log['image'] == 1:
                        d['is_image'] = True
                    elif log['image'] == 0:
                        d['is_image'] = False

                if log['logdata']:
                    lines = log['logdata'][0].strip().split('\n')
                    status = []
                    for i in range(len(lines) - 3, len(lines)):
                        status.append(lines[i])

                    if status:
                        if status[len(status) - 1]:
                            tmp = status[len(status) - 1].split('-')
                            #d['exit_status'] = tmp[len(tmp) - 1].strip()
                            txt = tmp[len(tmp) - 1].strip()
                            d['exit_status'] = '\n'.join(wrap(txt, 30))
                        if status[len(status) - 2] and status[len(status) - 2][0] == '0':
                            if any("Time taken" in i for i in status):
                                tmp = status[len(status) - 2].split(':')
                                d['time_taken'] = tmp[len(tmp) - 1].strip()
                        if status[len(status) - 3] and status[len(status) - 3][0] == '0':
                            tmp = status[len(status) - 3].split('-')
                            if any("speed" in i for i in tmp):
                                spd = tmp[len(tmp) - 1].split(':')
                                d['avg_transfer_speed'] = spd[len(spd) - 1].strip()
                            if any("Transferred" in i for i in tmp):
                                size = tmp[len(tmp) - 2].split(' ')
                                d['transfer_size'] = '%s %s' % (size[1], size[2])
                    tmp = lines[0].split('-')
                    started_at = time.strftime(
                        '%Y-%m-%d %H:%M:%S', time.localtime(int(tmp[1])))
                    d['started_at'] = started_at

                l.append(d)

    except Exception, e:
        return None, 'Could not compile report: %s' % e
    else:
        return l, None


def compile_todays_report():
    try:
        curr = time.strftime('%Y-%m-%d', time.localtime())
        report, err = compile_report(date_on=curr)
        if err:
            raise Exception(err)

    except Exception, e:
        return None, 'Could not compile report: %s' % e
    else:
        return report, None


def generate_pdf_report(name=None, date_on=None, date_from=None, date_till=None):
    try:
        from reportlab.lib import colors
        from reportlab.lib.pagesizes import A3
        from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph
        from reportlab.lib.styles import getSampleStyleSheet

        report, err = compile_report(date_on, date_from, date_till)
        if err:
            raise Exception(err)

        if not name:
            curr = time.strftime('%Y%m%d-%H%M%S', time.localtime())
            name = 'urbackup-%s' % curr

        reports_path, err = config.get_urbackup_reports_dir_path()
        if err:
            raise Exception(err)
        report_path = '%s/%s.pdf' % (reports_path, name)

        doc = SimpleDocTemplate(report_path, pagesize=A3)

        elements = []
        styles = getSampleStyleSheet()

        elements.append(Paragraph('''
            <para align=center spaceb=3>IntegralSTOR: UrBackup Report
            </para>''', styles['Heading1']))

        host_name, err = networking.get_hostname()
        domain_name, err = networking.get_domain_name()

        org_info = ''
        org_d, err = system_info.get_org_info()
        if org_d:
            if org_d['org_name']:
                org_info = 'Organization name: %s<br/>' % org_d['org_name']
            if org_d['unit_name']:
                org_info = '%sUnit name: %s<br/>' % (org_info, org_d['unit_name'])
            if org_d['unit_id']:
                org_info = '%sUnit ID: %s<br/>' % (org_info, org_d['unit_id'])
            if org_d['subunit_name']:
                org_info = '%sSubunit name: %s<br/>' % (org_info, org_d['subunit_name'])
            if org_d['subunit_id']:
                org_info = '%sSubunit ID: %s<br/>' % (org_info, org_d['subunit_id'])
        description = '%s<br/>Host: %s.%s<br/>' % (org_info, host_name, domain_name)
        curr = time.strftime('%Y-%m-%d at %H:%M:%S', time.localtime())
        description = '%sGenerated on %s <br/>' % (description, curr)
        if date_on:
            description = '%sBackup logs for %s' % (description, date_on)
        elif date_from and date_till:
            description = '%sBackup logs from %s till %s' % (
                description, date_from, date_till)
        elif date_from and not date_till:
            description = '%sBackup logs from %s' % (description, date_from)
        elif not date_from and date_till:
            description = '%sBackup logs till %s' % (description, date_till)
        else:
            description = '%sAll backup logs' % description
        description = '%s<br/><br/>' % description
        elements.append(Paragraph(
            '<para align=left spaceb=3>%s</para>' % description, styles['Normal']))

        data = []
        l = ['S.NO.',
             'CLIENT NAME',
             #'CREATED AT',
             'STARTED AT',
             'TRANSFER\nTYPE',
             'BACKUP\nTYPE',
             'TRANSFER\nSIZE',
             'TIME\nTAKEN',
             'AVERAGE\nSPEED',
             'STATUS']
        data.append(l)

        for r in report:
            if r['is_image'] == True:
                r['is_image'] = 'Image'
            else:
                r['is_image'] = 'File'
            if r['is_incremental'] == True:
                r['is_incremental'] = 'Incremental'
            else:
                r['is_incremental'] = 'Full'
            l = [r['sno'],
                 r['client_name'],
                 # r['created_at'],
                 r['started_at'],
                 r['is_incremental'],
                 r['is_image'],
                 r['transfer_size'],
                 r['time_taken'],
                 r['avg_transfer_speed'],
                 r['exit_status']]
            data.append(l)

        t = Table(data, repeatRows=1)
        t.setStyle(TableStyle([('BOX', (0, 0), (-1, -1), 2, colors.black),
                               ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.black),
                               ('LINEABOVE', (0, 1), (-1, 1), 2, colors.black),
                               ('BACKGROUND', (0, 0), (-1, 0), colors.lavender),
                               ('FONT', (0, 0), (-1, 0), 'Helvetica-Bold'),
                               ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                               ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'), ]))
        elements.append(t)
        if not report:
            elements.append(Paragraph('''
                <para align=center spaceb=3>\nNo backups
                </para>''', styles['Heading3']))

        doc.build(elements)

    except Exception, e:
        return None, 'Could not generate PDF: %s' % e
    else:
        return True, None


def generate_todays_pdf_report():
    try:
        curr = time.strftime('%Y%m%d', time.localtime())
        date_on = time.strftime('%Y-%m-%d', time.localtime())
        report, err = generate_pdf_report(
            name='urbackup-%s' % curr, date_on=date_on)
        if err:
            raise Exception(err)

    except Exception, e:
        return None, 'Could not generate PDF report: %s' % e
    else:
        return report, None


if __name__ == '__main__':
    # ret, err = get_clients()
    # ret, err = get_clients('15')
    # ret, err = get_file_backups()
    # ret, err = get_image_backups()
    # ret, err = get_logs('2017-06-21','2017-06-22')
    # ret, err = get_logs(date_till='2017-06-21')
    # ret, err = get_log_data()
    # ret, err = get_log_data([1119,1121])
    # ret, err = compile_report()
    # ret, err = compile_todays_report()
    # ret, err = generate_pdf_report()
    ret, err = generate_pdf_report(
        date_from='2017-06-21', date_till='2017-06-22')
    import pprint
    pp = pprint.PrettyPrinter(indent=4)
    pp.pprint(ret)
    pp.pprint(err)


# vim: tabstop=8 softtabstop=0 expandtab ai shiftwidth=4 smarttab
