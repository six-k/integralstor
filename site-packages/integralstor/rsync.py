from integralstor import config, db


def get_available_switches():
    """Maintains the dictionary of rsync switch related information and
    acts a schema/structure for holding/passing switch related info

    """
    switches = {}
    try:
        switches = {
            '-a': {
                'name': 'Archive',
                'id': 'archive',
                'key': '-a',
                'description': 'Enable recursion and preserve almost everything',
                'is_long': False,
                'is_arg': False,
                'arg_value': None
            },
            '-u': {
                'name': 'Update',
                'id': 'update',
                'key': '-u',
                'description': 'Skip files that are newer on the receiver',
                'is_long': False,
                'is_arg': False,
                'arg_value': None
            },
            '-R': {
                'name': 'Relative',
                'id': 'relative',
                'key': '-R',
                'description': 'Use relative path names',
                'is_long': False,
                'is_arg': False,
                'arg_value': None
            },
            '-l': {
                'name': 'Links',
                'id': 'links',
                'key': '-l',
                'description': 'Copy symlinks as symlinks',
                'is_long': False,
                'is_arg': False,
                'arg_value': None
            },
            '-L': {
                'name': 'Copy links',
                'id': 'copy_links',
                'key': '-L',
                'description': 'Transform all symlinks into referent file/dir',
                'is_long': False,
                'is_arg': False,
                'arg_value': None
            },
            '--copy-unsafe-links': {
                'name': 'Copy unsafe links',
                'id': 'copy_unsafe_links',
                'key': '--copy-unsafe-links',
                'description': 'Copy only the referent of symbolic links that point outside the copied tree',
                'is_long': True,
                'is_arg': False,
                'arg_value': None
            },
            '-k': {
                'name': 'Copy dir links',
                'id': 'copy_dirlinks',
                'key': '-k',
                'description': 'Transform symlink to dir into referent dir',
                'is_long': False,
                'is_arg': False,
                'arg_value': None
            },
            '-K': {
                'name': 'Keep dir links',
                'id': 'keep_dirlinks',
                'key': '-K',
                'description': 'Treat symlinked dir on receiver as dir',
                'is_long': False,
                'is_arg': False,
                'arg_value': None
            },
            '-H': {
                'name': 'Preserve hard links',
                'id': 'hard_links',
                'key': '-H',
                'description': 'Preserve hard links',
                'is_long': False,
                'is_arg': False,
                'arg_value': None
            },
            '-E': {
                'name': 'Executability',
                'id': 'executability',
                'key': '-R',
                'description': 'Preserve executability',
                'is_long': False,
                'is_arg': False,
                'arg_value': None
            },
            '-t': {
                'name': 'Times',
                'id': 'times',
                'key': '-t',
                'description': 'Preserve modification times',
                'is_long': False,
                'is_arg': False,
                'arg_value': None
            },
            '-O': {
                'name': 'Omit dir times',
                'id': 'omit_dir_times',
                'key': '-O',
                'description': 'Omit directories while preserving modification times',
                'is_long': False,
                'is_arg': False,
                'arg_value': None
            },
            '-x': {
                'name': 'One filesystem',
                'id': 'one_file_system',
                'key': '-x',
                'description': 'Do not cross filesystem boundaries',
                'is_long': False,
                'is_arg': False,
                'arg_value': None
            },
            '-A': {
                'name': 'Preserve ACLs',
                'id': 'acls',
                'key': '-A',
                'description': 'Preserve ACLs',
                'is_long': False,
                'is_arg': False,
                'arg_value': None
            },
            '-X': {
                'name': 'Preserve extended attributes',
                'id': 'xattrs',
                'key': '-X',
                'description': 'Preserve extended attributes(xattrs)',
                'is_long': False,
                'is_arg': False,
                'arg_value': None
            },
            '--exclude': {
                'name': 'Exclude pattern',
                'id': 'exclude',
                'key': '--exclude',
                'description': 'Exclude files matching pattern',
                'is_long': True,
                'is_arg': True,
                'arg_value': None
            },
            '--temp-dir': {
                'name': 'Temprorary dir',
                'id': 'temp_dir',
                'key': '--temp-dir',
                'description': 'Create temporary files in the specified directory',
                'is_long': True,
                'is_arg': True,
                'arg_value': None
            },
            '--delete': {
                'name': 'Delete',
                'id': 'delete',
                'key': '--delete',
                'description': 'Delete extraneous files from destination dirs',
                'is_long': True,
                'is_arg': False,
                'arg_value': None
            },
            '--force': {
                'name': 'Force',
                'id': 'force',
                'key': '--force',
                'description': 'Force deletion of dirs even if not empty',
                'is_long': True,
                'is_arg': False,
                'arg_value': None
            },
            '--partial': {
                'name': 'Partial',
                'id': 'partial',
                'key': '--partial',
                'description': 'Keep partially transferred files',
                'is_long': True,
                'is_arg': False,
                'arg_value': None
            },
            '--progress': {
                'name': 'Progress',
                'id': 'progress',
                'key': '--progress',
                'description': 'Show progress during transfer',
                'is_long': True,
                'is_arg': False,
                'arg_value': None
            },
            '-z': {
                'name': 'Compression',
                'id': 'compress',
                'key': '-z',
                'description': 'Compress file data during the transfer',
                'is_long': False,
                'is_arg': False,
                'arg_value': None
            },
            '--bwlimit': {
                'name': 'Bandwidth limit',
                'id': 'bwlimit',
                'key': '--bwlimit',
                'description': 'Limit socket I/O bandwidth',
                'is_long': True,
                'is_arg': True,
                'arg_value': None
            },
            '-n': {
                'name': 'Dry run',
                'id': 'dry_run',
                'key': '-n',
                'description': 'Perform a trial run with no changes made',
                'is_long': False,
                'is_arg': False,
                'arg_value': None
            },
            '-v': {
                'name': 'Verbose output',
                'id': 'verbose',
                'key': '-v',
                'description': 'Verbose information about what files are being transferred and a brief summary at the end',
                'is_long': False,
                'is_arg': False,
                'arg_value': None
            },
        }

    except Exception, err:
        return None, err
    else:
        return switches, None


def form_switches_command(switches):
    """Form the switches to a format that can be passed to the rsync
     command

    args:       a dict containing switches passed from form's
                cleaned_data. The dictionary must be of the same
                semantics as the one returned by
                get_available_swithces()

    returns:    a dict with two keys:short and long, and its values
                that are rsync command ready
    """

    switches_formed = {}
    switches_formed['short'] = None
    switches_formed['long'] = None

    try:
        sw_long = ''
        sw_short = ''
        if not switches:
            raise Exception('Malformed switches')

        for k, v in switches.items():
            if v['is_long']:
                if v['is_arg'] and v['arg_value']:
                    val = '%s="%s"' % (str(v['key']), str(v['arg_value']))
                else:
                    val = '%s' % str(v['key'])
                sw_long = '%s %s' % (sw_long, val)
            else:
                if v['is_arg'] and v['arg_value']:
                    val = '%s="%s"' % (str(v['key']), str(v['arg_value']))
                else:
                    val = '%s' % str(v['key'])
                sw_short = '%s %s' % (sw_short, val)

        switches_formed['short'] = sw_short.strip()
        switches_formed['long'] = sw_long.strip()

    except Exception, e:
        return None, str(e)
    else:
        return switches_formed, None


def form_rsync_paths_command(rsync_type, source, target, remote_ip, remote_user_name):
    """Form 'source_path' and 'target_path' in a format that is rsync command ready

    Returns:    (dict, None) or (None, str)
                - A dictionary with 'source_path' & 'target_path' if successful, else,
                  (none, "Error string")
    """
    source_path = ''
    target_path = ''
    try:
        if (not (rsync_type and source and target and remote_ip and remote_user_name)):
            raise Exception('Invalid parameters')
        if rsync_type not in ['pull', 'push', 'local']:
            raise Exception('Invalid parameters')
        if rsync_type == 'pull':
            source_path = '%s@%s:%s' % (
                remote_user_name, remote_ip, source)
            target_path = target
        elif rsync_type == 'push':
            target_path = '%s@%s:%s' % (
                remote_user_name, remote_ip, target)
            source_path = source
        elif rsync_type == 'local':
            target_path = target
            source_path = source

    except Exception, e:
        return None, 'Could not form paths: %s' % str(e)
    else:
        return {'source_path': source_path, 'target_path': target_path}, None


def _generate_rsync_config():
    """
    This generates the rsync config.
    Assumed is that, xinetd is already installed and rsync deamon is enabled in xinetd

    Path of config : /etc/rsyncd.conf

    Default Config :
    [rsync_share_name]

    path=/pool/dataset/dir
    comment="Description of this share"
    list=true
    readonly = False, Selectable
    uid = integralstor (Selectable)
    gid = integralsto (Selectable)r

    """

    try:
        shares, err = load_shares_list()
        if err:
            raise Exception(err)
        with open("/etc/rsyncd.conf", "w") as f:
            f.write("uid = integralstor\n")
            f.write("gid = integralstor\n")
            f.write("\n")
            for share in shares:
                f.write("[%s]\n" % share["name"])
                f.write("\n")
                f.write("path = %s\n" % share["path"])
                f.write("comment = %s\n" % share["comment"])
                list = 'true' if share["list"] else 'false'
                readonly = 'true' if share["readonly"] else 'false'
                f.write("list = %s\n" % list)
                f.write("readonly = %s\n" % readonly)
                f.write("\n")
    except Exception, e:
        return False, 'Error generating rsync config : %s' % str(e)
    else:
        return True, None


def create_rsync_share(name, path, comment, list, readonly, uid, gid):
    try:
        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)

        check, err = db.get_single_row(
            db_path, "select * from rsync_shares where name='%s'" % name)
        if check:
            raise Exception("Share already exists.Use a different share name")

        cmd_list = []
        cmd = ["insert into rsync_shares (name,path,comment,list,readonly,uid,gid) values(?,?,?,?,?,?,?)", (
            name, path, comment, list, readonly, uid, gid)]
        cmd_list.append(cmd)
        ret, err = db.execute_iud(db_path, cmd_list)
        if err:
            raise Exception(err)
        conf, err = _generate_rsync_config()
        if err:
            raise Exception(err)
    except Exception, e:
        return False, 'Error saving rsync config settings : %s' % str(e)
    else:
        return True, None


def get_rsync_share_details(name):
    share = None
    try:
        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)
        share, err = db.get_single_row(
            db_path, "select * from rsync_shares where name='%s'" % name)
        if not share:
            raise Exception("Specified share not found ")
    except Exception, e:
        return False, 'Error deleting the share: %s' % str(e)
    else:
        return share, None


def delete_rsync_share(name):
    try:
        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)
        cmd_list = []
        check, err = db.get_single_row(
            db_path, "select * from rsync_shares where name='%s'" % name)
        if not check:
            raise Exception("Specified share not found ")
        cmd = ["delete from rsync_shares where name='%s'" % name]
        cmd_list.append(cmd)
        ret, err = db.execute_iud(db_path, cmd_list)
        if err:
            raise Exception(err)
        conf, err = _generate_rsync_config()
        if err:
            raise Exception(err)
    except Exception, e:
        return False, 'Error deleting the share: %s' % str(e)
    else:
        return True, None


def delete_all_rsync_shares():
    try:
        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)
        cmd_list = []
        cmd = ['delete from rsync_shares']
        cmd_list.append(cmd)
        ret, err = db.execute_iud(db_path, cmd_list)
        if err:
            raise Exception(err)
        conf, err = _generate_rsync_config()
        if err:
            raise Exception(err)
    except Exception, e:
        return False, 'Error deleting all rsync shares : %s' % str(e)
    else:
        return True, None


def load_shares_list():
    """Load the list of currently created rsync shares from the db

    """

    l = []
    try:
        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)
        l, err = db.get_multiple_rows(db_path, 'select * from rsync_shares')
        if err:
            raise Exception(err)
    except Exception, e:
        return None, 'Error loading RSYNC shares list : %s' % str(e)
    else:
        return l, None


def main():
    # print create_rsync_share("test", "/server/rsync/hello", "Testing rsync deamon again", True, True, "integralstor", "integralstor")
    # print create_rsync_share("test2", "/server/rsync/hello", "Testing rsync deamon again", True, False, "integralstor", "integralstor")
    # print load_shares_list()
    # print delete_rsync_share("test")
    # print _generate_rsync_config()
    print form_rsync_paths_command('pull', '/tank/ds1', '/tar-tank/ds1', '2.2.2.2', 'replicator')
    print form_rsync_paths_command('push', '/tank/ds1', '/tar-tank/ds1', '2.2.2.2', 'replicator')
    print form_rsync_paths_command('local', '/tank/ds1', '/tar-tank/ds1', '2.2.2.2', 'replicator')
    """
    sw, err = get_available_switches()
    print sw
    print '-' * 10
    for s in sw:
        print sw[s]
    """
    pass


if __name__ == "__main__":
    main()

# vim: tabstop=8 softtabstop=0 expandtab ai shiftwidth=4 smarttab
